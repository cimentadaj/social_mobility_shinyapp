{
    "collab_server" : "",
    "contents" : "library(car)\nlibrary(broom)\nlibrary(tidyverse)\nlibrary(forcats)\nlibrary(cimentadaj)\nlibrary(ggthemes)\nlibrary(lme4)\nlibrary(MuMIn)\nlibrary(GGally)\nlibrary(gridExtra)\nlibrary(here)\n\n###### THIS IS WHERE YOU CHANGE YOUR WORKING DIRECTORY ##############\n # Folder with all .rda files for each country\nwalk(here(\"raw_data\", list.files(\"./raw_data/\", pattern = \".rda\")), load)\n\ncountries3 <- list(Austria = prgautp1.design,\n                   `United States` = prgusap1.design,\n                   Belgium = prgbelp1.design,\n                   Germany = prgdeup1.design,\n                   Italy = prgitap1.design,\n                   Netherlands = prgnldp1.design,\n                   Denmark = prgdnkp1.design,\n                   Sweden = prgswep1.design,\n                   France = prgfrap1.design,\n                   `United Kingdom` = prggbrp1.design,\n                   Spain = prgespp1.design,\n                   Canada = prgcanp1.design,\n                   `Czech Republic`= prgczep1.design,\n                   Estonia = prgestp1.design,\n                   Finland = prgfinp1.design,\n                   Japan = prgjpnp1.design,\n                   Korea = prgkorp1.design,\n                   Norway = prgnorp1.design,\n                   Poland = prgpolp1.design,\n                   `Russian Federation` = prgrusp1.design,\n                   `Slovak Republic` = prgsvkp1.design\n)\n\n\nsvy_recode <- function(svy_design, old_varname, new_varname, recode) {\n    \n    svy_design2 <- lapply(svy_design, function(cnt) {\n        for (data in seq_along(cnt$design)) {\n            cnt$designs[[data]]$variables[, new_varname] <-\n                car::recode(cnt$designs[[data]]$variables[, old_varname], recode)\n        }\n        cnt\n    })\n    \n    svy_design2\n    \n}\n\ncountries3 <- svy_recode(countries3, 'isco', 'lowerclass_extreme', '8:9 = 1; 1:2 = 0; else = NA')\ncountries3 <- svy_recode(countries3, 'isco', 'serviceclass_extreme', '8:9 = 0; 1:2 = 1; else = NA')\ncountries3 <- svy_recode(countries3, 'age_categories', 'postwelfare', '1:5 = 1; 6:10 = 0; else = NA')\n\n##### Model Specification #####\ndv <- \"serviceclass_extreme\"\nage <- 1:10\ncohort <- \"fullcohort\"\n\nall_firstcovariates <- c(\"pvnum\", \"non.cognitive\", \"age_categories\", \"postwelfare\")\nvars_to_subset <- c(all_firstcovariates, \"gender\", \"lowisced\", \"highisced\")\ndigits <- 2\n\n# Loop through country datasets and names, create a column with that country's name\n# and select all variables in vars_subset (which includes the country var)\ncnts <- map2(countries3, names(countries3), function(data, names) {\n    data$designs[[1]]$variables %>%\n        mutate(country = names,\n               cohort = ifelse(age_categories <= 5, \"post\", \"pre\")) %>%\n        select_(.dots = map(c(vars_to_subset, dv, \"country\"), as.name))\n})\n\ncnt_bind <- Reduce(rbind, cnts)\ncnt_bind$pvnum <- scale(cnt_bind$pvnum)\nattributes(cnt_bind$pvnum) <- NULL\n\nrhs_sequence <- function(iv) {\n        stop_message(length(iv) < 1, \"iv must have length >= 1\")\n        warning_message(any(is.na(iv)), \"NA's found in iv. Removing them.\")\n        \n        non_na_iv <- na.omit(iv)\n        model_combination <- map(seq_along(non_na_iv), ~ seq(1:.x))\n        rhs <- map(model_combination, ~ paste(non_na_iv[.x], collapse = \" + \"))\n        \n        rhs\n    }\nstatic_formula <- function(dv, rhs) {\n        new_dv <- paste0(dv, \" ~ 1\")\n        rhs <- paste0(c(rhs), collapse = \" + \")\n        as.formula(paste0(c(new_dv, rhs), collapse = \" + \"))\n    }\n    \ncovariate_list <-\n    map(list(all_firstcovariates), function(iv) static_formula(dv, iv)) %>%\n    `c`(recursive = T)\n\n# Pass that list to the glm to run two different models\n\ncnt_lowisced <- subset(cnt_bind, gender == 1 & age_categories %in% age & lowisced == 1)\ncnt_highisced <- subset(cnt_bind, gender == 1 & age_categories %in% age & highisced == 1)\n\ncountry_lowisced_split <- split(cnt_lowisced, cnt_lowisced$country)\ncountry_highisced_split <- split(cnt_highisced, cnt_highisced$country)\n\nmodels_low <-\n    map(country_lowisced_split, ~ {\n    glm(formula = covariate_list[[1]],\n        data = .x,\n        # weights = .x$spfwt0, # weights not working for some reason\n        family = \"binomial\")\n})\n\nmodels_high <-\n    map(country_highisced_split, ~ {\n    glm(formula = covariate_list[[1]],\n        data = .x,\n        # weights = .x$spfwt0, # weights not working for some reason\n        family = \"binomial\")\n})\n\nquantile_est <- function(df) {\n\n    country_list <- map(df, ~ {\n        cogn_quantile <- Hmisc::wtd.quantile(.x$pvnum,\n                                                 weights = .x$spfwt0,\n                                                 probs = seq(0.01, 1, 0.01))\n        \n        noncogn_quantile <- Hmisc::wtd.quantile(.x$non.cognitive,\n                                                    weights = .x$spfwt0,\n                                                    probs = seq(1, 0.01, -0.01))\n        \n            isced <- tibble(pvnum = cogn_quantile,\n                            non.cognitive = noncogn_quantile,\n                            age_categories = modelr::typical(.x$age_categories),\n                            postwelfare = modelr::typical(.x$postwelfare))\n        isced\n    })\n    country_list\n}\n\nhigh_isced <- quantile_est(country_highisced_split)\nlow_isced <- quantile_est(country_lowisced_split)\n\nhigh_isced <-\n    map2(high_isced, models_high, ~ {\n    .x$pred <- predict(.y, newdata = .x, type = \"response\")\n    .x\n})\n\nlow_isced <-\n    map2(low_isced, models_low, ~ {\n        .x$pred <- predict(.y, newdata = .x, type = \"response\")\n        .x\n    })\n\nadd_predictions_se <- function(data, model) {\n    se <- predict(model, newdata = data, type = \"response\", se.fit = T)$se.fit\n    data[[\"se\"]] <- se\n    data\n}\n\nhigh_isced <- map2(high_isced, models_high, add_predictions_se)\nlow_isced <- map2(low_isced, models_low, add_predictions_se)\n\nhigh_isced <- map(high_isced, ~ {\n    .x$isced <- \"High ISCED\"\n    .x$rank_noncognitive <- 100:1\n    .x$rank_cognitive <- 1:100\n    .x\n})\n\nlow_isced <- map(low_isced, ~ {\n    .x$isced <- \"Low ISCED\"\n    .x$rank_noncognitive <- 100:1\n    .x$rank_cognitive <- 1:100\n    .x\n})\n\nhigh_isced <-\n    high_isced %>%\n    enframe() %>%\n    unnest(value) %>%\n    rename(country = name)\n\nlow_isced <-\n    low_isced %>%\n    enframe() %>%\n    unnest(value) %>%\n    rename(country = name)\n\nprob_isced_data <- bind_rows(high_isced, low_isced)\n\nprob_isced_data <-\n    prob_isced_data %>%\n    select(-age_categories, -postwelfare) %>%\n    mutate(pred = pred * 100,\n           se = se * 100,\n           lower = pred - se,\n           upper = pred + se) %>%\n    unite(rank_label, rank_noncognitive, rank_cognitive, sep = \" - \", remove = F) %>%\n    mutate(rank = rep(1:100, 42), # 42 because it's 21 countries for both low and high isced\n           cogn_noncogn_cat =\n               case_when(.$rank_cognitive %in% 1:30 & .$rank_noncognitive %in% 70:100 ~ \"Bottomcogn_topnoncogn\",\n                         .$rank_cognitive %in% 70:100 & .$rank_noncognitive %in% 1:30 ~ \"Topcogn_bottomnoncogn\")) %>%\n    gather(rank_category, value, rank_cognitive, rank_noncognitive)\n\ntop <- 90\ntop_b <- 70\nbottom_b <- 30\nbottom <- 10\n\ndata_ready <-\n  prob_isced_data %>%\n    mutate(cogn_label = case_when(.$isced == \"High ISCED\" & .$rank <= 30 ~ top_b,\n                                  .$isced == \"High ISCED\" & .$rank >= 70 ~ top,\n                                  .$isced == \"Low ISCED\" & .$rank <= 30 ~ bottom,\n                                  .$isced == \"Low ISCED\" & .$rank >= 70 ~ bottom_b),\n           cogn_label_fac = factor(cogn_label,\n                                   levels = c(top, top_b, bottom_b, bottom),\n                                   labels = c(\"topcogn_bottncogn_high\",\n                                              \"bottcogn_topnoncogn_high\",\n                                              \"topcogn_bottnoncogn_low\",\n                                              \"bottcogn_topnoncogn_low\"), ordered = T))\ndata_m <-\n    data_ready %>%\n    mutate(cogn_num = factor(as.numeric(cogn_label_fac), levels = c(\"4\", \"3\", \"2\", \"1\"))) %>%\n    select(country, pred, cogn_label_fac, isced, cogn_num, cogn_label) %>%\n    map_if(is_double, round, 2) %>%\n    as_tibble()\n\nwrite_csv(data_m, \"./dataset.csv\")\n",
    "created" : 1496910116285.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "40|70|52|0|\n80|30|89|4|\n90|37|94|4|\n109|35|114|0|\n117|36|122|0|\n124|30|142|0|\n148|37|151|0|\n154|35|157|4|\n159|45|163|0|\n168|33|173|0|\n175|31|180|0|\n",
    "hash" : "2416277674",
    "id" : "88FCC5C3",
    "lastKnownWriteTime" : 1496911524,
    "last_content_update" : 1496911524845,
    "path" : "~/Downloads/gitrepo/social_mobility_shinyapp/generating_data.R",
    "project_path" : "generating_data.R",
    "properties" : {
    },
    "relative_order" : 2,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}